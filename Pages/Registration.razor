@page "/registration"
@using Interfaces;
@inject IAppService AppService;
@using MauiBlazorApp.Models;

<h3>Registration</h3>
<EditForm Model="@registrationModel" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <img src="@_userAvatar" @onclick="DisplayAction" height="50" width="50" />
    <div class="form-group">
        <label>First Name</label>
        <input class="form-control" @bind-value="@registrationModel.FirstName" placeholder="Enter First Name">
        <ValidationMessage For="@(()=> registrationModel.FirstName)" />
    </div>

    <div class="form-group">
        <label>Last Name</label>
        <input class="form-control" @bind-value="@registrationModel.LastName" placeholder="Enter Last Name">
        <ValidationMessage For="@(()=> registrationModel.LastName)" />
    </div>

    <div class="mt-2 form-group">
        <label>Gender</label>
        <div class="d-flex flex-row">
            <div class="d-flex gap-2">
                <div class="form-check">
                    <input @onchange="@(()=> registrationModel.Gender="male")" class="form-check-input" type="radio" name="flexRadioDefault">
                    <label class="form-check-label" for="flexRadioDefault1">
                        Male
                    </label>
                </div>
                <div class="form-check">
                    <input @onchange="@(()=> registrationModel.Gender="female")" class="form-check-input" type="radio" name="flexRadioDefault">
                    <label class="form-check-label" for="flexRadioDefault2">
                        Female
                    </label>
                </div>
            </div>
            <ValidationMessage For="@(()=> registrationModel.Gender)" />
        </div>

    </div>

    <div class="form-group">
        <label>Email address</label>
        <input type="email" class="form-control" @bind-value="@registrationModel.Email" placeholder="Enter email">
        <ValidationMessage For="@(()=> registrationModel.Email)" />
    </div>
    <div class="mt-2 form-group">
        <label>Password</label>
        <input type="password" class="form-control" @bind-value="@registrationModel.Password" placeholder="Password">
        <ValidationMessage For="@(()=> registrationModel.Password)" />
    </div>

    <div class="mt-2 text-end">
        <NavLink class="nav-link" href="/">
            <span>Already have an account?</span>
        </NavLink>
    </div>

    <div class="text-center mt-2">
        <button class="btn btn-primary" type="submit">
            <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
            Register
        </button>
    </div>
</EditForm>

@code {
    RegistrationModel registrationModel = new();
    private string _spinnerClass = "";
    private string _userAvatar = "images/default_avatar.png";
    private string _imageBase64Data;

    private async void Submit()
    {
        _spinnerClass = "spinner-border spinner-border-sm";

        if (!string.IsNullOrWhiteSpace(_imageBase64Data))
        {
            registrationModel.UserAvatar = _imageBase64Data;
        }

        var response = await AppService.RegisterUser(registrationModel);
        if (response.IsSuccess)
        {
            await App.Current.MainPage.DisplayAlert("Success", "User registered", "OK");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Sorry", response.ErrorMessage, "OK");
        }
        _spinnerClass = "";
        this.StateHasChanged();
    }

    private async void DisplayAction()
    {
        string response = await App.Current.MainPage.DisplayActionSheet("Select option", "OK", null, "Take photo", "Add photo");

        if (response == "Take photo")
        {
            if (MediaPicker.Default.IsCaptureSupported)
            {
                var photo = await MediaPicker.Default.CapturePhotoAsync();
                if (photo != null)
                {
                    byte[] imageBytes;
                    //var newFile = Path.Combine(FileSystem.CacheDirectory, photo.FileName);
                    var stream = await photo.OpenReadAsync();

                    using (MemoryStream ms = new MemoryStream())
                    {
                        stream.CopyTo(ms);
                        imageBytes = ms.ToArray();
                    }
                    _imageBase64Data = Convert.ToBase64String(imageBytes);
                    _userAvatar = string.Format("data:image/png;base64,{0}", _imageBase64Data);
                    this.StateHasChanged();
                }
            }
        }
        else if (response == "Add photo")
        {
            var photo = await MediaPicker.Default.PickPhotoAsync();
            if (photo != null)
            {
                byte[] imageBytes;
                //var newFile = Path.Combine(FileSystem.CacheDirectory, photo.FileName);
                var stream = await photo.OpenReadAsync();

                using (MemoryStream ms = new MemoryStream())
                {
                    stream.CopyTo(ms);
                    imageBytes = ms.ToArray();
                }
                _imageBase64Data = Convert.ToBase64String(imageBytes);
                _userAvatar = string.Format("data:image/png;base64,{0}", _imageBase64Data);
                this.StateHasChanged();
            }
        }
    }
}
